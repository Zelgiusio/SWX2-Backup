[gcode_macro FILAMENT_UNLOAD]
gcode:
 M109 S230
 M83
 G92 E0.0
 G1 E-100 F500
 G92 E0.0
 M82

[gcode_macro FILAMENT_LOAD]
gcode:
 MOVE_TO_NEUTRAL_POSITION
 M109 S230
 M83
 G92 E0.0
 G1 E125 F150
 G1 E-35 F2400
 G92 E0.0
 M82


# Use SET_IDLER to control idle timeout and behavior
# 
# The default behavior is to only turn off the extruder heater.
# Set a parameter to 1 to keep that component on and 0 to turn it off.
# 
# Examples:
# 
# Power off printer after 15 minutes:
# SET_IDLER TIME=900 POWER=0
# 
# Turn off only the bed_heater after 5 minutes:
# SET_IDLER TIME=300 EXTRUDER=1 BED=0
# 
# Turn off only extruder after 1 minute:
# SET_IDLER TIME=60
# 
# Turn off bed and extruder, set chamber, but leave steppers on after (default) 15 minutes:
# 
# SET_IDLER EXTRUDER=0 BED=0 CHAMBER=0 STEPPERS=1 POWER=1
# 
# 
# The CHAMBER section offers several options depending on your configuration.
# 
# The first is my personal config, which sets the chamber fan target to the temperature
# read by my ambient room temperature sensor
# 
# The second is for if you have an active chamber heater.
# 
# The final one just sets the chamber fan to off.
# You could instead set the target to any arbitrary value you like by changing the target on that line
# 
# If you don't have any chamber temperature components, you can just comment out all three options.

[gcode_macro SET_IDLER]
description: Sets the idle timeout and behavior
variable_extruder: 0
variable_bed: 1
variable_chamber: 1
variable_steppers: 1
variable_power: 0
gcode:
    {% set VAR_POWER = printer["gcode_macro SET_IDLER"].power %}
    {% set VAR_BED = printer["gcode_macro SET_IDLER"].bed %}
    {% set VAR_EXTRUDER = printer["gcode_macro SET_IDLER"].extruder %}
    {% set VAR_CHAMBER = printer["gcode_macro SET_IDLER"].chamber %}
    {% set VAR_STEPPERS = printer["gcode_macro SET_IDLER"].chamber %}

    {% set POWER = params.POWER|default(VAR_POWER)|int %}
    {% set TIME = params.TIME|default(900)|int %}
    {% set BED = params.BED|default(VAR_BED)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(VAR_EXTRUDER)|int %}
    {% set CHAMBER = params.CHAMBER|default(VAR_CHAMBER)|int %}
    {% set STEPPERS = params.STEPPERS|default(VAR_STEPPERS)|int %}


    SET_GCODE_VARIABLE MACRO=SET_IDLER VARIABLE=power VALUE={POWER}
    SET_GCODE_VARIABLE MACRO=SET_IDLER VARIABLE=bed VALUE={BED}
    SET_GCODE_VARIABLE MACRO=SET_IDLER VARIABLE=extruder VALUE={EXTRUDER}
    SET_GCODE_VARIABLE MACRO=SET_IDLER VARIABLE=chamber VALUE={CHAMBER}
    SET_GCODE_VARIABLE MACRO=SET_IDLER VARIABLE=steppers VALUE={STEPPERS}

    SET_IDLE_TIMEOUT TIMEOUT={TIME}

[gcode_macro _IDLER]
gcode:
    {% set POWER = printer["gcode_macro SET_IDLER"].power %}
    {% set BED = printer["gcode_macro SET_IDLER"].bed %}
    {% set EXTRUDER = printer["gcode_macro SET_IDLER"].extruder %}
    {% set CHAMBER = printer["gcode_macro SET_IDLER"].chamber %}
    {% set STEPPERS = printer["gcode_macro SET_IDLER"].chamber %}

    {% if POWER == 0 %}
        # Disable steppers
        M84
        # Disable all heaters
        TURN_OFF_HEATERS
        # Run macro to turn off relay or smart switch
        _POWER_SAVE
    {% endif %}
    {% if STEPPERS == 0 %}
        # Disable steppers
        M84
    {% endif %}
    {% if BED == 0 %}
        # Disable bed heater
        SET_HEATER_TEMPERATURE HEATER=heater_bed
    {% endif %}
    {% if EXTRUDER == 0 %}
        # Disable extruder
        SET_HEATER_TEMPERATURE HEATER=extruder
    {% endif %}
    {% if CHAMBER == 0 %}
        # Set chamber heater fan target to ambient room temp
        {% set chamber_target = printer["temperature_sensor ambient"].temperature|default(25)|float %}
        #SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={chamber_target}

        # Turn off active chamber heater
        # SET_HEATER_TEMPERATURE HEATER=chamber

        # Turn off chamber heater fan
        #SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target=0
    {% endif %}

[idle_timeout]
timeout: 900
gcode:
    # Run the idler macro
    _IDLER


[gcode_macro SMARTHOME]
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
    {% else %}
        G28
    {% endif %}

[gcode_macro PID_EXTRUDER]
gcode:
 M106 S255
 {% set TARGET_TEMP = params.TARGET_TEMP|default(210)|float %} 
 PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}

[gcode_macro PID_BED]
gcode:
 {%set TARGET_TEMP = params.TARGET_TEMP|default(70)|float %}
 PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}

[gcode_macro LOCK_Z_STEPPERS]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1

[gcode_macro UN_LOCK_Z_STEPPERS]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0

[gcode_macro MOVE_TO_NEUTRAL_POSITION]
gcode:
  SMARTHOME
  g90; set to absolute positioning
  g1 x150 y150 f9000
  g1 z100 f3000


[gcode_macro PROBE_OFFSET]
gcode:
  PROBE_CALIBRATE

[gcode_macro BED_TRAM]
gcode:
  SCREWS_TILT_CALCULATE
  

  ## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
gcode:
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 300.0 ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 20.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 35.0  ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
#gcode: